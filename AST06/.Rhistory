y=-0.2,
text="Data Source :<br> mtcars",
)
plot_ly(data = mtcars,
x=~mpg,
y=~wt,
type = "scatter",
mode="markers") %>%
add_annotations(
xref="paper",
yref="paper",
x=1,
y=-0.2,
text="Data Source :<br> mtcars",
)
plot_ly(data = mtcars,
x=~mpg,
y=~wt,
type = "scatter",
mode="markers") %>%
add_annotations(
xref="paper",
yref="paper",
x=1,
y=-0.2,
text="Data Source :<br> mtcars",
)
plot_ly(data = mtcars,
x=~mpg,
y=~wt,
type = "scatter",
mode="markers") %>%
add_annotations(
x=mtcars$mpg[which.max(mtcars$mpg)],
y=mtcars$wt[which.max(mtcars$mpg)],
xref="paper",
yref="paper",
x=1,
y=-0.2,
text="Data Source :<br> mtcars",
)
plot_ly(mtcars, x = ~cyl, y=~mpg,type="bar",color = I("blue") ,name="mpg and hp by cylinders") %>%
add_trace(y = ~hp, name="Horse Power", color = I("black")) %>%
layout(xaxis = list(title='Cylinders',tickanle=-45),yaxis=list(title='count'),barmode='group')
library(plotly)
plot_ly(mtcars, x = ~cyl, y=~mpg,type="bar",color = I("blue") ,name="mpg and hp by cylinders") %>%
add_trace(y = ~hp, name="Horse Power", color = I("black")) %>%
layout(xaxis = list(title='Cylinders',tickanle=-45),yaxis=list(title='count'),barmode='group')
library(tidyverse)
library(ggplot2)
#install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
p<-ggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) +
geom_smooth(aes(x=carat, y=price, color=cut))
p
p<- p+facet_wrap( ~ cut, nrow=3,ncol=2)
p
p<- p+facet_wrap( ~ cut)
p
plot <- ggplot(diamonds,
aes(x=carat,y=price))+ geom_density(aes(fill=cut),alpha=0.5)
plot<-plot+facet_wrap(~cut)
plot
library(plotly)
df <- read.csv("2014_world_gdp_with_codes.csv")
head(df)
fig <- plot_ly(df, type='choropleth', locations=df$CODE, z=df$GDP..BILLIONS., text=df$COUNTRY, colorscale="Blues")
fig
str(iris)
iris %>%
group_by(Species) %>%
summarise(sepal.len = mean(Sepal.Length)) %>%
summarise(sepal.wid = mean(Sepal.Width)) %>%
summarise(petal.len = mean(Petal.Length)) %>%
summarise(petal.len = mean(Petal.Length))
library(plotly)
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
library(listviewer)
str(iris)
iris %>%
group_by(Species) %>%
summarise(sepal.len = mean(Sepal.Length)) %>%
summarise(sepal.wid = mean(Sepal.Width)) %>%
summarise(petal.len = mean(Petal.Length)) %>%
summarise(petal.len = mean(Petal.Length))
iris %>% summarise_each(funs(mean), -Species)
iris %>% summarise_if(is.numeric, mean)
iris %>%
group_by(Species) %>%
summarise_if(is.numeric, mean)
p3 <- ggplot(iris, aes(fill=Species,x=Petal.width)) + geom_bar(position="stack")
p3
p3 <- ggplot(iris, aes(fill=Species,x=Petal.Width)) + geom_bar(position="stack")
p3
p1 <- ggplot(iris, aes(fill=Species,x=Petal.Width, y= Sepal.Width)) + geom_bar(position="stack")
p1
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width)) + coord_flip()
p2
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width, y=Sepal.Height)) + coord_flip()
p2
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width, y=Sepal.Length)) + coord_flip()
p2
ggplot(diamonds, aes(cut)) +
geom_bar(aes(fill = clarity), position = "fill")
p<- ggplot(diamonds, aes(cut)) +
geom_bar()
p
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width, y=Sepal.Length))
+ geom_bar()
p2
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width, y=Sepal.Length)) + geom_bar()
p2
p2 <- ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length)) + geom_bar()
p2
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width) + geom_bar()
p2
#horizontal bars
p2 <- ggplot(iris, aes(fill=Species,x=Sepal.Width)) + geom_bar()
p2
p2 <- ggplot(iris, aes(x=Sepal.Width)) + geom_bar
p2
p<- ggplot(diamonds, aes(cut)) +
geom_bar()
p
p2 <- ggplot(iris, aes(Sepal.Width)) + geom_bar ()
p2
p<-ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(aes(size=carat, shape=clarity, alpha=price))
p
p2 <- ggplot(iris, aes(fill = Sepal.Width, x = Sepal.Width)) + geom_bar ()
p2
p2
p1 <- ggplot(iris, aes(fill=Species,x=Petal.Width)) + geom_bar(position="stack")
p1
p2 <- ggplot(iris, aes(fill = Sepal.Width, x = Sepal.Width)) + geom_bar ()
p2
p2 <- ggplot(iris, aes(fill = Species, x = Species)) + geom_bar ()
p2
p3 <- plot_ly(data = iris, x = ~Petal.Width, y = ~Petal.Length, type = 'scatter', mode = 'markers', color=~Species, hovertext= ~Species)
p3
p3 <- plot_ly(data = iris, x = ~Petal.Width, y = ~Petal.Length, type = 'scatter', mode = 'markers', color=~Species, hovertext= ~Species)
p3 <- p3 %>% layout(title = 'Petal Dimensions', yaxis = list(title = list(text= 'Length of Petal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Petal'),zeroline = FALSE))
p3
p3 <- plot_ly(data = iris, x = ~Petal.Width, y = ~Petal.Length, type = 'scatter', mode = 'markers', color=~Species, size=~Sepal.Width ,hovertext=~Sepal.Width)
p3 <- p3 %>% layout(title = 'Petal Dimensions', yaxis = list(title = list(text= 'Length of Petal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Petal'),zeroline = FALSE))
max_len <- iris[which(iris$Petal.Length== max(irist$Petal.length))]
p3 <- p3 %>%
add_annotations(x = max_len$Petal.Width, y = max_len$Petal.Length,
text = paste(max_len$Species,max_len$Petal.Length, sep=" "),
xref = "x", yref = "y", showarrow = TRUE, arrowhead = 5, ax = -20, ay = -40)
p3
p2 <- ggplot(iris, aes(Sepal.Width)) + geom_bar ()
p2 + theme_linedraw()
#horizontal bars
p2 <- ggplot(iris, aes(Sepal.Width)) + geom_bar ()
p2 <- p2 %>% layout(title = 'Sepal Width Trend', yaxis = list(title = list(text= 'Frequency'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Sepal'),zeroline = FALSE))
p2 + theme_linedraw()
p2 <- ggplot(iris, aes(Sepal.Width)) + geom_bar ()
p2+labs(y= "Frequency", x = "Width of Sepal")
p2 + theme_linedraw()
p2 <- ggplot(iris, aes(Sepal.Width)) + geom_bar () + labs(y= "Frequency", x = "Width of Sepal")
p2 + theme_linedraw()
p2 <- ggplot(iris, aes(x = Sepcies, y = Sepal.Width)) + geom_bar () + labs(y= "Frequency", x = "Width of Sepal")
p2 + theme_linedraw()
p2 <- ggplot(iris, aes(x = Species, y = Sepal.Width)) + geom_bar () + labs(y= "Frequency", x = "Width of Sepal")
p2 + theme_linedraw()
p2 <- ggplot(iris, aes(x = Species, y = Sepal.Width)) + geom_bar (stat="identity", width=0.5) + labs(y= "Frequency", x = "Width of Sepal")
p2 + theme_linedraw()
p2 <- ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_bar (stat="identity", width=0.5) + labs(y= "Frequency", x = "Width of Sepal")
p2 + theme_linedraw()
source('C:/Users/Tanya/Desktop/LAB/DV/midterm.R')
p1 <- ggplot(iris, aes(fill=Species,x=Petal.Width)) + geom_bar(position="stack")
p1
#mean summary
v = iris %>%
group_by(Species) %>%
summarise_if(is.numeric, mean)
v
#mean summary
v = iris %>%
group_by(Species) %>%
summarise_if(is.numeric, mean)
v
p2 <- plot_ly(data = iris, type = 'bar',x=~Petal.Width, y=~Petal.Lenght, name="Petal Dimensions" )%>%
add_trace(y=~Species)%>%
layout(barmode='stack')
p2
p2 <- plot_ly(data = iris, type = 'bar',x=~Petal.Width, y=~Petal.Length, name="Petal Dimensions" )%>%
add_trace(y=~Species)%>%
layout(barmode='stack')
p2
p1 <- plot_ly(data = iris, type = 'bar',x=~Petal.Width, y=~Species)%>%
layout(barmode='stack')
p1
p2 <- plot_ly(data = iris, type = 'bar',x=~Sepal.Width, y=~Sepal.Length)
p2
p2 <- plot_ly(data = iris, type = 'bar',x=~Sepal.Width, y=~Sepal.Length) + coord_flip()
p2 <- p2 %>% layout(title = 'Sepal Dimensions', yaxis = list(title = list(text= 'Length of Sepal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Sepal'),zeroline = FALSE))
plot_ly(data = iris, type = 'bar',x=~Sepal.Width, y=~Sepal.Length) + coord_flip()
p2 <- plot_ly(data = iris, type = 'bar',x=~Sepal.Width, y=~Sepal.Length,  orientation = 'h')
p2 <- p2 %>% layout(title = 'Sepal Dimensions', yaxis = list(title = list(text= 'Length of Sepal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Sepal'),zeroline = FALSE))
p2
p1 <- plot_ly(data = iris, type = 'bar',x=~Petal.Width, y=~Petal.Length)%>%
layout(barmode='stack')
p1
p1 <- plot_ly(data = iris, type = 'bar',x=~Petal.Width, y=~Petal.Length)%>%
add_trace(y=~Species, name = 'Species')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Sepal Dimensions', yaxis = list(title = list(text= 'Length of Sepal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Sepal'),zeroline = FALSE))
p1
p1 <- plot_ly(data = iris, type = 'bar',x=~Species)%>%
add_trace(y=~Petal.Length, name = 'Petal Length')%>%
add_trace(y=~Sepal.Length, name = 'Sepal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Lengths'),zeroline = FALSE), xaxis = list(title = list(text = 'Species'),zeroline = FALSE))
p1
p1 <- plot_ly(data = iris, type = 'bar',x=~Species, name = 'Species',name = ~variable, color = ~variable)%>%
add_trace(y=~Petal.Length, name = 'Petal Length')%>%
add_trace(y=~Sepal.Length, name = 'Sepal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Lengths'),zeroline = FALSE), xaxis = list(title = list(text = 'Species'),zeroline = FALSE))
p1
p1 <- plot_ly(data = iris, type = 'bar',x=~Species, name = 'Species')%>%
add_trace(y=~Petal.Length, name = 'Petal Length')%>%
add_trace(y=~Sepal.Length, name = 'Sepal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Length')), xaxis = list(title = list(text = 'Species')))
p1
add_trace(y=~Petal.Length, name = 'Petal Length')%>%
add_trace(y=~Sepal.Length, name = 'Sepal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Length')), xaxis = list(title = list(text = 'Species')))
p1
p1 <- plot_ly(data = iris, type = 'bar',x=~Species, y=~Sepal.Length, name = 'Species')%>%
add_trace(y=~Petal.Length, name = 'Petal Length')%>%
add_trace(y=~Sepal.Length, name = 'Sepal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Length')), xaxis = list(title = list(text = 'Species')))
p1
#stacked chart
p1 <- plot_ly(data = iris, type = 'bar',x=~Species, y=~Sepal.Length, name = 'Sepal Length')%>%
add_trace(y=~Sepal.Length, name = 'Sepal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Length')), xaxis = list(title = list(text = 'Species')))
p1
p1 <- plot_ly(data = iris, type = 'bar',x=~Species, y=~Sepal.Length, name = 'Sepal Length')%>%
add_trace(y=~Petal.Length, name = 'SPetal Length')%>%
layout(barmode='stack')
p1 <- p1 %>% layout(title = 'Species Dimensions', yaxis = list(title = list(text= 'Length')), xaxis = list(title = list(text = 'Species')))
p1
p2 <- plot_ly(data = iris, type = 'bar',x=~Sepal.Width, y=~Sepal.Length,  orientation = 'h')
p2 <- p2 %>% layout(title = 'Sepal Dimensions', yaxis = list(title = list(text= 'Length of Sepal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Sepal'),zeroline = FALSE))
p2
#scatter plot
p3 <- plot_ly(data = iris, x = ~Petal.Width, y = ~Petal.Length, type = 'scatter', mode = 'markers', color=~Species, size=~Sepal.Width ,hovertext=~Sepal.Width)
p3 <- p3 %>% layout(title = 'Petal Dimensions', yaxis = list(title = list(text= 'Length of Petal'),zeroline = FALSE), xaxis = list(title = list(text = 'Width of Petal'),zeroline = FALSE))
max_len <- iris[which(iris$Petal.Length== max(irist$Petal.length))]
p3
#mean summary
v = iris %>%
group_by(Species) %>%
summarise_if(is.numeric, mean)
v
library("treemap")
library("tidyverse")
library("treemap")
library("tidyverse")
library(RColorBrewer)
data <- read.csv("Dataset/post-data.txt")
head(data)
treemap(data, index="category", vSize="views",
vColor="comments", type="value",
palette="RdYlBu")
data <- read.csv("post-data.txt")
head(data)
treemap(data, index="category", vSize="views",
vColor="comments", type="value",
palette="RdYlBu")
treemap(data, index="category", vSize="views",
vColor="comments", type="manual",
palette="RdYlBu")
treemap(data, index="category", vSize="views",
vColor="comments", type="manual",
palette="Blues",
algorithm = "squarified",
title="Tree map of Views",
title.legend = "COMMENTS")
treemap(data, index="category", vSize="views",
vColor="comments", type="manual",
palette="Blues",
algorithm = "squarified",
title="Tree map of Views",
title.legend = "COMMENTS")
install.packages("nycflights13")
library("nycflights13")
flights
flights_df <- flights
table(flights_df$flight)
library("plyr")
count(flights_df, 'flight')
install.packages("plyr")
library("plyr")
count(flights_df, 'flight')
join(flights_df, flights_df.frame(table(flight = flights_df$flight)))
join(flights_df, data.frame(table(flight = flights_df$flight)))
flights_df <- na.omit(flights)
class_length=table(flights_df$flight)
class_length
flights_df$flight
class_length=table(flights_df$flight)
class_length_df=as.data.frame(class_length)
class_length_df
library(plyr)
class_length = count(flights_df,"flight") #Using the count function
class_length
library(plyr)
flights_freq = count(flights_df,"flight") #Using the count function
merge(flights_df, flights_freq, by.x="flight", by.y="flight")
flights_freq$flight
library(plyr)
library(readr)
flights_freq = count(flights_df,"flight") #Using the count function
flights_freq$flight
joined_flights <- left_join(flights_df, flights_freq,
by = c("flight" = "flight"))
flights_freq = count(flights_df,"flight") #Using the count function
results<-merge(x=flights_df,y=flights_freq,by="flight",all.x=TRUE)
# Remove NA values
flights_df <- na.omit(flights)
# Compute flight delay cost for every flight. And delay cost into dataset
# Hint: Cost Index=[(number of flights)*mean(delay)/mean(distance)]
library(plyr)
flights_freq = count(flights_df,"flight") #Using the count function
results<-merge(x=flights_df,y=flights_freq,by="flight",all.x=TRUE)
results
View(flights_freq)
View(flights_df)
View(results)
flights_mean<-aggregate(flights_df['delay','distance'], list(flights_df$flight), mean)
library(plyr)
flights_freq = count(flights_df,"flight") #Using the count function
flights_df<-merge(x=flights_df,y=flights_freq,by="flight",all.x=TRUE) #append frequency of flights
flights_mean<-aggregate(flights_df['delay','distance'], list(flights_df$flight), mean)
View(flights_df)
View(flights_df)
View(flights_df)
flights_mean<-aggregate(flights_df['dep_delay','distance'], list(flights_df$flight), mean)
flights_mean<-aggregate(flights_df[,['dep_delay','distance'], list(flights_df$flight), mean)
flights_mean<-aggregate(flights_df[,'dep_delay','distance', list(flights_df$flight), mean)
flights_mean<-aggregate(flights_df[,c('dep_delay','distance')], list(flights_df$flight), mean)
View(flights_mean)
flights_df<-merge(x=flights_df,y=flights_mean,by="flight",all.x=TRUE) #append frequency of flights
View(flights_mean)
flights_df<-merge(x=flights_df,y=flights_mean,by="Group.1",all.x=TRUE) #append frequency of flights
View(flights_freq)
View(flights_mean)
ddply(flights_df, .(flight), summarize,  mean_delay=mean(dep_delay), mean_distance=mean(distance))
flights_mean = ddply(flights_df, .(flight), summarize,  mean_delay=mean(dep_delay), mean_distance=mean(distance))
flights_df<-merge(x=flights_df,y=flights_mean,by="flight",all.x=TRUE) #append frequency of flights
View(flights_df)
flights_df$delay_cost = flights_df$freq*flights_df$mean_delay/flights_df$mean_distance
flights_count = count(flights_df,"flight") #number of flights
flights_df<-merge(x=flights_df,y=flights_count,by="flight",all.x=TRUE) #append frequency of flights
flights_mean = ddply(flights_df, .(flight), summarize,  mean_arr_delay=mean(arr_delay), mean_distance=mean(distance))
flights_df<-merge(x=flights_df,y=flights_mean,by="flight",all.x=TRUE) #append frequency of flights
flights_df$delay_cost = flights_df$freq*flights_df$mean_arr_delay/flights_df$mean_distance
#Word Cloud provides an excellent option to visualize the text data
#in the form of tags, or words,
#where the importance of a word is identified by its frequency.
#install.packages("wordcloud2")
library(wordcloud2)
library(readr)
library(dplyr)
library(e1071)
library(mlbench)
#install.packages("mlbench")
#Text mining packages
#install.packages("NLP")
#install.packages("tm")
#install.packages("SnowballC")
#install.packages("wordcloud")
library(tm)
library(SnowballC)
library("wordcloud")
library("RColorBrewer")
#loading the data
t1 <- read_csv("biden_data.csv")
glimpse(t1)
t1$Recommended_IND[1]
# Create corpus
corpus = Corpus(VectorSource(t1$text))
# Look at corpus
corpus[[1]][1]
#Conversion to Lowercase
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, tolower)
#Removing Punctuation
corpus = tm_map(corpus, removePunctuation)
corpus[[1]][1]
#Remove stopwords
corpus = tm_map(corpus, removeWords, c(stopwords("english")))
corpus[[1]][1]
# Stemming
corpus = tm_map(corpus, stemDocument)
corpus[[1]][1]
# Eliminate white spaces
corpus = tm_map(corpus, stripWhitespace)
corpus[[1]][1]
#Create Document Term Matrix
DTM <- TermDocumentMatrix(corpus)
mat <- as.matrix(DTM)
f <- sort(rowSums(mat),decreasing=TRUE)
dat <- data.frame(word = names(f),freq=f)
head(dat, 5)
"
Word Cloud Generation
Word Cloud in R is generated using the wordcloud function. The major arguments of this function are given below:
words: The words to be plotted.
freq: The frequencies of the words.
min.freq: An argument that ensures that words with a frequency below min.freq will not be plotted in the word cloud.
max.words: The maximum number of words to be plotted.
random.order: An argument that specifies plotting of words in random order. If false, the words are plotted in decreasing frequency.
rot.per: The proportion of words with 90 degree rotation (vertical text).
colors: An argument that specifies coloring of words from least to most frequent.
"
#WordCloud 1
set.seed(100)
wordcloud(words = dat$word, freq = dat$freq, random.order=TRUE)
#WordCloud 2
set.seed(100)
wordcloud(words = dat$word, freq = dat$freq, random.order=FALSE)
#WordCloud 3
set.seed(100)
wordcloud(words = dat$word, freq = dat$freq, min.freq = 15, max.words=250, random.order=FALSE, rot.per=0.30, colors=brewer.pal(8, "Dark2"))
setwd("C:/Users/Tanya/Desktop/LAB/DV/data-visualization/AST06")
#Word Cloud provides an excellent option to visualize the text data
#in the form of tags, or words,
#where the importance of a word is identified by its frequency.
#install.packages("wordcloud2")
library(wordcloud2)
library(readr)
library(dplyr)
library(e1071)
library(mlbench)
#install.packages("mlbench")
#Text mining packages
#install.packages("NLP")
#install.packages("tm")
#install.packages("SnowballC")
#install.packages("wordcloud")
library(tm)
library(SnowballC)
library("wordcloud")
library("RColorBrewer")
#loading the data
t1 <- read_csv("biden_data.csv")
glimpse(t1)
t1$Recommended_IND[1]
# Create corpus
corpus = Corpus(VectorSource(t1$text))
# Look at corpus
corpus[[1]][1]
#Conversion to Lowercase
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, tolower)
#Removing Punctuation
corpus = tm_map(corpus, removePunctuation)
corpus[[1]][1]
#Remove stopwords
corpus = tm_map(corpus, removeWords, c(stopwords("english")))
corpus[[1]][1]
# Stemming
corpus = tm_map(corpus, stemDocument)
corpus[[1]][1]
# Eliminate white spaces
corpus = tm_map(corpus, stripWhitespace)
corpus[[1]][1]
#Create Document Term Matrix
DTM <- TermDocumentMatrix(corpus)
mat <- as.matrix(DTM)
f <- sort(rowSums(mat),decreasing=TRUE)
dat <- data.frame(word = names(f),freq=f)
head(dat, 5)
"
Word Cloud Generation
Word Cloud in R is generated using the wordcloud function. The major arguments of this function are given below:
words: The words to be plotted.
freq: The frequencies of the words.
min.freq: An argument that ensures that words with a frequency below min.freq will not be plotted in the word cloud.
max.words: The maximum number of words to be plotted.
random.order: An argument that specifies plotting of words in random order. If false, the words are plotted in decreasing frequency.
rot.per: The proportion of words with 90 degree rotation (vertical text).
colors: An argument that specifies coloring of words from least to most frequent.
"
#WordCloud 1
set.seed(100)
wordcloud(words = dat$word, freq = dat$freq, random.order=TRUE)
#WordCloud 2
set.seed(100)
wordcloud(words = dat$word, freq = dat$freq, random.order=FALSE)
#WordCloud 3
set.seed(100)
wordcloud(words = dat$word, freq = dat$freq, min.freq = 15, max.words=250, random.order=FALSE, rot.per=0.30, colors=brewer.pal(8, "Dark2"))
